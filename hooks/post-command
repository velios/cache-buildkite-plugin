#!/bin/bash
# shellcheck disable=SC2001
# shellcheck disable=SC1091
# shellcheck disable=SC2086
# shellcheck disable=SC1090

set -euo pipefail

BK_CACHE_BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"
BK_CACHE_ID=""
BK_LOG_PREFIX="(*) - "

. "$BK_CACHE_BASEDIR/lib/shared.bash"

if [[ -n "${BUILDKITE_PLUGIN_CACHE_ID:-}" ]]; then
  BK_CACHE_ID="${BUILDKITE_PLUGIN_CACHE_ID:-}"
  BK_LOG_PREFIX="[\033[33m$BK_CACHE_ID\033[0m] - "
  echo -e "~~~ :bash: Processing \033[33mPost-Cache\033[0m for \033[33m$BK_CACHE_ID\033[0m"
else
  echo -e "~~~ :bash: Processing \033[33mPost-Cache\033[0m..."
  echo "Please use 'id' key to identify caches"
fi

cd ..
ls
cd ..
ls
cd ..
ls
cd ..
ls
cd /buildkite/builds/m2
ls

if [[ "${BUILDKITE_PLUGIN_CACHE_DEBUG:-false}" =~ (true|on|1) ]]; then
  set -x
fi

if [ "${BUILDKITE_COMMAND_EXIT_STATUS}" -ne 0 ]; then
  if [[ "${BUILDKITE_PLUGIN_CACHE_CONTINUE_ON_ERROR:-false}" =~ (true|on|1) ]]; then
    info "Step returned non-zero exit code: ${BUILDKITE_COMMAND_EXIT_STATUS}. Continuing per instructed as continue_on_error"
  else
    echo -e "--- ${BK_LOG_PREFIX}üö® Cache is skipped because step returned ${BUILDKITE_COMMAND_EXIT_STATUS}"
    exit 0
  fi
fi

if [[ "${BUILDKITE_PLUGIN_CACHE_PR:-true}" =~ (false|off|0) ]]; then
  if [[ ! "${BUILDKITE_PULL_REQUEST:-false}" =~ (false) ]]; then
    echo -e "${BK_LOG_PREFIX}PR Detected. Skipping..."
    exit 0
  fi
fi

if [[ "${BUILDKITE_PLUGIN_CACHE_UPLOAD_CACHE:-true}" =~ (false|off|0) ]]; then
  echo -e "${BK_LOG_PREFIX}‚è≠Ô∏è Cache upload is disabled. Skipping..."
  exit 0
elif [[ "${BUILDKITE_PLUGIN_CACHE_UPLOAD_CACHE:-true}" == "default-branch-only" ]]; then
  if [[ ${BUILDKITE_BRANCH} != "${BUILDKITE_PIPELINE_DEFAULT_BRANCH}" ]]; then
    echo -e "${BK_LOG_PREFIX}‚è≠Ô∏è Cache upload is disabled on non-default branches. Skipping..."
    exit 0
  fi
fi

if [[ -n "${BUILDKITE_PLUGIN_CACHE_KEY:-}" ]]; then

  # Defaults...
  BK_CACHE_BACKEND="${BUILDKITE_PLUGIN_CACHE_BACKEND:-tarball}"
  CACHE_KEY="$(expand_templates "$BUILDKITE_PLUGIN_CACHE_KEY")"

  source_locating "$CACHE_KEY"

  paths=()

  if [[ -n "${BUILDKITE_PLUGIN_CACHE_PATHS:-}" ]]; then
    paths+=("$BUILDKITE_PLUGIN_CACHE_PATHS")
  fi

  while IFS='=' read -r path _; do
    if [[ $path =~ ^(BUILDKITE_PLUGIN_CACHE_PATHS_[0-9]+) ]]; then
      paths+=("${!path}")
    fi
  done < <(env | sort)

  if [ -f "$BK_CACHE_BASEDIR/lib/backends/$BK_CACHE_BACKEND.bash" ]; then
    . "$BK_CACHE_BASEDIR/lib/backends/$BK_CACHE_BACKEND.bash"
    cache
  else
    echo -e "${BK_LOG_PREFIX}üö® $BK_CACHE_BACKEND is not supported or not provided. Soft failing..."
    exit 0
  fi
else
  echo -e "${BK_LOG_PREFIX}üö® Cache is skipped because no cache key provided."
  exit 0
fi
